diff -Nur cocotron/Foundation/NSAutoreleasePool/NSAutoreleasePool.h cocotron.f/Foundation/NSAutoreleasePool/NSAutoreleasePool.h
--- cocotron/Foundation/NSAutoreleasePool/NSAutoreleasePool.h	2015-07-27 15:40:24.000000000 +0000
+++ cocotron.f/Foundation/NSAutoreleasePool/NSAutoreleasePool.h	2015-07-28 12:21:00.463799259 +0000
@@ -9,7 +9,15 @@
 #import <Foundation/NSObject.h>
 
 @interface NSAutoreleasePool : NSObject {
+#if !defined(LINUX)
     struct objc_autoreleasepool *_pool;
+#else
+   NSAutoreleasePool *_parent;
+   NSUInteger         _pageCount;
+   id               **_pages;
+   NSUInteger         _nextSlot;
+   NSAutoreleasePool *_childPool;
+#endif
 }
 
 + (void)addObject:object;
diff -Nur cocotron/Foundation/NSAutoreleasePool/NSAutoreleasePool.m cocotron.f/Foundation/NSAutoreleasePool/NSAutoreleasePool.m
--- cocotron/Foundation/NSAutoreleasePool/NSAutoreleasePool.m	2015-07-27 15:40:24.000000000 +0000
+++ cocotron.f/Foundation/NSAutoreleasePool/NSAutoreleasePool.m	2015-07-28 12:21:00.462799259 +0000
@@ -13,31 +13,120 @@
 #import <Foundation/NSThread-Private.h>
 #import <Foundation/NSRaiseException.h>
 
+#if !defined(LINUX)
 #import <objc/objc_arc.h>
+#endif
 
 @implementation NSAutoreleasePool
 
+#if defined(LINUX)
+#define PAGESIZE 1024
+
+void objc_noAutoreleasePool(id object) {
+   NSCLog("autorelease pool is nil, leaking %x %s",object,object_getClassName(object));
+}
+
+static inline void addObject(NSAutoreleasePool *self,id object){
+   if(self==nil){
+    objc_noAutoreleasePool(object);
+    return;
+   }
+   
+   if(self->_nextSlot>=self->_pageCount*PAGESIZE){
+    self->_pageCount++;
+    self->_pages=NSZoneRealloc(NULL,self->_pages,self->_pageCount*sizeof(id *));
+    self->_pages[self->_pageCount-1]=NSZoneMalloc(NULL,PAGESIZE*sizeof(id));
+   }
+
+   self->_pages[self->_nextSlot/PAGESIZE][self->_nextSlot%PAGESIZE]=object;
+   self->_nextSlot++;
+}
+#endif //LINUX
+
+
 +(void)addObject:object {
+#if !defined(LINUX)
     objc_autorelease(object);
+#else
+   if(NSThreadCurrentPool()==nil)
+    [NSException raise:@"NSAutoreleasePoolException"
+                format:@"NSAutoreleasePool no current pool"];
+
+   addObject(NSThreadCurrentPool(),object);
+#endif
 }
 
 -init {
+#if !defined(LINUX)
     _pool=objc_autoreleasePoolPush();
+#else
+   NSAutoreleasePool *current=NSThreadCurrentPool();
+
+   _parent=current;
+
+   _pageCount=1;
+   _pages=NSZoneMalloc(NULL,_pageCount*sizeof(id *));
+   _pages[0]=NSZoneMalloc(NULL,PAGESIZE*sizeof(id));
+   _nextSlot=0;
+
+   if(current!=nil)
+    current->_childPool=self;
+   _childPool=nil;
+
+   NSThreadSetCurrentPool(self);
+#endif //LINUX
    return self;
 }
 
 -(void)dealloc {
+#if !defined(LINUX)
     objc_autoreleasePoolPop(_pool);
+#else
+   int i;
+
+   [_childPool release];
+
+   for(i=0;i<_nextSlot;i++){
+    NS_DURING
+     id object=_pages[i/PAGESIZE][i%PAGESIZE];
+
+     [object release];
+    NS_HANDLER
+     NSLog(@"Exception while autoreleasing %@",localException);
+    NS_ENDHANDLER
+   }
+
+   for(i=0;i<_pageCount;i++)
+    NSZoneFree(NULL,_pages[i]);
+
+   NSZoneFree(NULL,_pages);
+
+   NSThreadSetCurrentPool(_parent);
+
+   if(_parent!=nil)
+    _parent->_childPool=nil;
 
+   NSDeallocateObject(self);
+   return;
+#endif
    [super dealloc];
 }
 
 -(void)addObject:object {
+#if !defined(LINUX)
     objc_autoreleasePoolAdd(_pool,object);
+#else
+   addObject(self,object);
+#endif
 }
 
 id NSAutorelease(id object){
+#if !defined(LINUX)
     return objc_autorelease(object);
+#else
+   addObject(NSThreadCurrentPool(),object);
+   return object;
+#endif
 }
 
 -(void)drain {
diff -Nur cocotron/Foundation/NSZone/NSZone.m cocotron.f/Foundation/NSZone/NSZone.m
--- cocotron/Foundation/NSZone/NSZone.m	2015-07-28 12:20:42.332799584 +0000
+++ cocotron.f/Foundation/NSZone/NSZone.m	2015-07-28 12:21:00.461799259 +0000
@@ -22,6 +22,7 @@
 
 // NSZone functions implemented in platform subproject
 
+#if !defined(LINUX)
 void NSIncrementExtraRefCount(id object) {
     object_incrementExternalRefCount(object);
 }
@@ -34,6 +35,185 @@
     return object_externalRefCount(object);
 }
 
+#else
+
+typedef unsigned int OSSpinLock;
+
+#import <Foundation/NSAtomicCompareAndSwap.h>
+
+BOOL OSSpinLockTry( volatile OSSpinLock *__lock )
+{  
+   return __sync_bool_compare_and_swap(__lock, 0, 1);
+}
+
+void OSSpinLockLock( volatile OSSpinLock *__lock )
+{
+   while(!__sync_bool_compare_and_swap(__lock, 0, 1))
+   {
+#ifdef WIN32
+      Sleep(0);
+#else
+      usleep(1);
+#endif
+   }
+}
+
+void OSSpinLockUnlock( volatile OSSpinLock *__lock )
+{
+   __sync_bool_compare_and_swap(__lock, 1, 0);
+}
+
+typedef struct RefCountBucket {
+   struct RefCountBucket *next;
+   id                     object;
+   NSUInteger             count;
+} RefCountBucket;
+
+typedef struct {
+   NSUInteger       count;
+   NSUInteger       nBuckets;
+   RefCountBucket **buckets;
+} RefCountTable;
+
+static OSSpinLock RefCountLock=0;
+
+static inline RefCountTable *CreateRefCountTable() {
+   RefCountTable *table;
+
+   table=NSZoneMalloc(NULL,sizeof(RefCountTable));
+   table->count=0;
+   table->nBuckets=1024;
+   table->buckets=NSZoneCalloc(NULL,table->nBuckets,sizeof(RefCountBucket *));
+
+   return table;
+}
+
+static inline RefCountBucket *AllocBucketFromTable(RefCountTable *table){
+   return NSZoneMalloc(NULL,sizeof(RefCountBucket));
+}
+
+static inline void FreeBucketFromTable(RefCountTable *table,RefCountBucket *bucket){
+   NSZoneFree(NULL,bucket);
+}
+
+static inline NSUInteger hashObject(id ptr){
+   return (NSUInteger)ptr>>4;
+}
+
+static inline RefCountBucket *XXHashGet(RefCountTable *table,id object) {
+   NSUInteger      i=hashObject(object)%table->nBuckets;
+   RefCountBucket *check;
+
+   for(check=table->buckets[i];check!=NULL;check=check->next)
+    if(check->object==object)
+     return check;
+
+   return NULL;
+}
+
+static inline void XXHashInsert(RefCountTable *table,RefCountBucket *insert) {
+   NSUInteger hash=hashObject(insert->object);
+   NSUInteger i=hash%table->nBuckets;
+
+   if(table->count>=table->nBuckets){
+    NSInteger        oldnBuckets=table->nBuckets;
+    RefCountBucket **buckets=table->buckets;
+
+    table->nBuckets=oldnBuckets*2;
+    table->buckets=NSZoneCalloc(NULL,table->nBuckets,sizeof(RefCountBucket *));
+    for(i=0;i<oldnBuckets;i++){
+     RefCountBucket *check,*next;
+
+     for(check=buckets[i];check!=NULL;check=next){
+      NSUInteger newi=hashObject(check->object)%table->nBuckets;
+      next=check->next;
+      check->next=table->buckets[newi];
+      table->buckets[newi]=check;
+     }
+    }
+    NSZoneFree(NULL,buckets);
+    i=hash%table->nBuckets;
+   }
+
+   insert->next=table->buckets[i];
+   table->buckets[i]=insert;
+   table->count++;
+}
+
+static inline void XXHashRemove(RefCountTable *table,RefCountBucket *remove) {
+   NSUInteger      i=hashObject(remove->object)%table->nBuckets;
+   RefCountBucket *check=table->buckets[i],*prev=check;
+
+   for(;check!=NULL;check=check->next){
+    if(check==remove){
+     if(prev==check)
+      table->buckets[i]=check->next;
+     else
+      prev->next=check->next;
+
+     FreeBucketFromTable(table,check);
+     table->count--;
+     return;
+    }
+    prev=check;
+   }
+}
+
+static inline RefCountTable *refTable(void) {
+   static RefCountTable *refCountTable=NULL;
+      
+   if(refCountTable==NULL)
+    refCountTable=CreateRefCountTable();
+    
+   return refCountTable;
+} 
+
+void NSIncrementExtraRefCount(id object) {
+   RefCountBucket *refCount;
+   RefCountTable  *table=refTable();
+
+   OSSpinLockLock(&RefCountLock);
+   if((refCount=XXHashGet(table,object))==NULL){
+    refCount=AllocBucketFromTable(table);
+    refCount->object=object;
+    refCount->count=1;
+    XXHashInsert(refTable(),refCount);
+   }
+   refCount->count++;
+   OSSpinLockUnlock(&RefCountLock);
+}
+
+BOOL NSDecrementExtraRefCountWasZero(id object) {
+   BOOL            result=NO;
+   RefCountBucket *refCount;
+
+   OSSpinLockLock(&RefCountLock);
+   if((refCount=XXHashGet(refTable(),object))==NULL)
+    result=YES;
+   else {
+    refCount->count--;
+    if(refCount->count==1)
+     XXHashRemove(refTable(), refCount);
+   }
+   OSSpinLockUnlock(&RefCountLock);
+
+   return result;
+}
+
+NSUInteger NSExtraRefCount(id object) {
+   NSUInteger      result=1;
+   RefCountBucket *refCount;
+
+   OSSpinLockLock(&RefCountLock);
+   if((refCount=XXHashGet(refTable(),object))!=NULL)
+    result=refCount->count;
+   OSSpinLockUnlock(&RefCountLock);
+
+   return result;
+}
+
+#endif //LINUX
+
 BOOL NSShouldRetainWithZone(id object,NSZone *zone) {
    return (zone==NULL || zone==NSDefaultMallocZone() || zone==[object zone])?YES:NO;
 }
